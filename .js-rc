#!/usr/bin/env bash

# Node helpers
export jsh="$(dirname "${BASH_SOURCE[0]}")/js-helpers"

export PATH="$PATH:$HOME/node_modules/.bin"
export PATH="$PATH:node_modules/.bin"

if which brew &> /dev/null; then
  export NVM_DIR=~/.nvm
  nvm_dir="$(brew --prefix nvm)"
  if [ -d "$nvm_dir" ]; then
    . "$nvm_dir/nvm.sh"
  fi
fi

defn nr npm run

defn npi npm i
defn npid npm i -D
npm_install_dev_types() {
    for arg in "$@"; do
        npm i -D @types/"$arg"
    done
}
export -f npm_install_dev_types
defn npidt npm_install_dev_types
defn npig npm i -g
defn npl npm ls
defn npla npm ls --all
defn npln npm link
defn npui npm uninstall

defn pni pnpm i
pnpm_install_file() {
    for arg in "$@"; do
        pnpm i "file://$arg"
    done
}
export -f pnpm_install_file
defn pnif pnpm_install_file
defn pnid pnpm i -D
pnpm_install_dev_types() {
    for arg in "$@"; do
        pnpm i -D @types/"$arg"
    done
}
export -f pnpm_install_dev_types
defn pnidt pnpm_install_dev_types
defn pnl pnpm ls
defn pnld pnpm ls --depth
defn pnl0 pnpm ls --depth 0
defn pnl1 pnpm ls --depth 1
defn pnl2 pnpm ls --depth 2
defn pnl3 pnpm ls --depth 3
defn pnl4 pnpm ls --depth 4
defn pnl5 pnpm ls --depth 5
defn pnu pnpm update

defn pnln pnpm link
pnpm_link_ls() {
    for path in "$@"; do
        echo "Linking $path" >&2
        pnpm link "$path"
        pkg="$(jq -r .name < "$path/package.json")"
        echo "pnpm ls $pkg" >&2
        pnpm ls "$pkg"
    done
}
export -f pnpm_link_ls
defn pnll pnpm_link_ls
defn pnui pnpm uninstall
defn pnrm pnpm uninstall

defn ppj pretty-print-json
pretty_print_json_inplace() {
    tmp="$(mktemp)"
    for arg in "$@"; do
        cat "$arg" | jq . > "$tmp"
        mv "$tmp" "$arg"
    done
}
export -f pretty_print_json_inplace
defn ppji pretty_print_json_inplace
defn pji pretty_print_json_inplace
defn pjl pretty-print-json-less
defn jql pretty-print-json-less

jq_inplace() {
    tmp="$(mktemp)"
    jq "$@" > "$tmp"
    last="${@: -1}"
    if [ -s "$tmp" ]; then
        mv "$tmp" "$last"
    else
        return 1
    fi
}
export -f jq_inplace
defn jqi jq_inplace

defn jq. jq .
defn jf jq -f
defn jqf jq -f
defn jr jq -r
defn jqr jq -r
defn jqrs jq -rs
defn jqs jq -s
defn jqc jq -c
defn jqn jq length
jq_keys() {
    jq -r 'keys[]' "$@"
}
export -f jq_keys
defn jqk jq_keys

jq_lines_to_array() {
    jq -nR '[inputs | select(length>0)]' "$@"
}
export -f jq_lines_to_array
defn jql2a jq_lines_to_array

jq_lines_to_numbers() {
    jq_lines_to_array "$@" | jq 'map(tonumber)'
}
export -f jq_lines_to_numbers
defn jql2n jq_lines_to_numbers

sum() {
    jq_lines_to_numbers "$@" | jq add
}
export -f sum

human_readable_sum() {
    col="${1:-1}"
    awk "{ print \$$col }" | numfmt --from=iec | sum | numfmt --to=iec
}
export -f human_readable_sum
defn hsum human_readable_sum
defn hsum2 human_readable_sum 2
defn hsum3 human_readable_sum 3
defn hrs human_readable_sum
defn hrs2 human_readable_sum 2
defn hrs3 human_readable_sum 3

max() {
    jq_lines_to_numbers "$@" | jq max
}
export -f max

min() {
    jq_lines_to_numbers "$@" | jq min
}
export -f min

singleton() {
    jq "
        if (. | length) == 1 then
            .[0]
        else
            error(\"Expected 1 element, found \" + (.|length|tostring) + \": \" + (.|tostring))
        end
    " | jq "${@:-.}"
}
export -f singleton
defn jq1 singleton
defn j1 singleton
defn s1 singleton

singleton_object() {
    k="$1"; shift
    if [ "${k:0:1}" == "." ]; then
        k="${k:1}"
    fi
    jq "
        if (. | length) == 1 and has(\"$k\") then
            .$k
        else
            error(\"Expected object with single key \\\"$k\\\", found {\\\"\" + (.|keys|join(\"\\\", \\\"\")) + \"\\\"}\")
        end
    " "$@"
}
defn o1 singleton_object

keys() {
    jq -r 'keys[]' "$@"
}
export -f keys
defn ks keys

defn len jq length
defn jlen jq length

defn nrb npm run build
defn nrc npm run clean
defn nrcb npm run cleanbuild
defn nrd npm run dev
defn nrdk npm run docker
defn nrib npm run install-build
defn nrl npm run lint
defn nrt npm run test
defn nrx npm run export

defn nxd next dev
defn nb next build
defn nxb next build
defn nx next export
defn nxx next export
next_build_export() {
    next build && next export "$@"
}
export -f next_build_export
defn nbx next_build_export
defn nxbx next_build_export

declare_module() {
    m="$1"; shift
    d="node_modules/@types/$m"
    mkdir -p "$d"
    echo "declare module '$m';" > "$d/index.d.ts"
}
export -f declare_module
defn dm declare_module

defn p2j parquet2json
defn p2js parquet-2-json.sh schema
defn p2jn parquet-2-json.sh rowcount
defn p2jc parquet-2-json.sh cat
defn p2jcc parquet-2-json.sh cat -c
defn p2jcl parquet-2-json.sh cat -l
defn p2jcl1 parquet-2-json.sh cat -l 1
defn p2jcn parquet-2-json.sh cat -l
defn p2jh parquet-2-json.sh cat -l 10

parquet2json_head_pretty() {
    parquet-2-json.sh cat -l "$@" | jq .
}
export -f parquet2json_head_pretty
defn p2jhp parquet2json_head_pretty

parquet_pretty_print_n() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: $0 <n> [path]" >&2
        return 1
    fi
    n="$1"; shift
    if [ $# -eq 0 ]; then
        parquet2json <(cat) cat -l $n | jq .
    else
        parquet2json "$1" cat -l $n | jq .
    fi
}
export -f parquet_pretty_print_n
defn p2jcnq parquet_pretty_print_n

defn y yarn
defn yb yarn build
defn yi yarn install

defn yr yq -r

defn cna npx create-next-app
defn cnat npx create-next-app --ts
defn cnatn npx create-next-app --ts --use-npm
defn cnatp npx create-next-app --ts --use-pnpm

defn jqi1 jqi --indent 1
defn jqi2 jqi --indent 2
defn jqi4 jqi --indent 4
defn jqi1. jqi --indent 1 .
defn jqi2. jqi --indent 2 .
defn jqi4. jqi --indent 4 .
defn jqi1a jqi --indent 1 -a
defn jqi2a jqi --indent 2 -a
defn jqi4a jqi --indent 4 -a
defn jqi1a. jqi --indent 1 -a .
defn jqi2a. jqi --indent 2 -a .
defn jqi4a. jqi --indent 4 -a .

notebook_reindent_delete_ids() {
    jqi4a '.cells |= map(del(.id))' "$@"
}
export -f notebook_reindent_delete_ids
defn nrdi notebook_reindent_delete_ids

parquet2json_all() {
    local tmpfile=
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" == "-" ]); then
        tmpfile="$(mktemp)"
        cat > "$tmpfile"
        set -- "$tmpfile"
    fi
    parquet-2-json.sh rowcount "$@" && \
    parquet-2-json.sh schema "$@" && \
    parquet-2-json.sh cat -l 10 "$@"
    rv=$?
    if [ -n "$tmpfile" ]; then
        rm "$tmpfile"
    fi
    return $rv
}
export -f parquet2json_all
defn p2ja parquet2json_all
